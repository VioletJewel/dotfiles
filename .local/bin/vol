#!/usr/bin/dash

b="$(cat <<__EOF
            _
__   _____ | |  a simple pulseaudio
\ \ / / _ \| |  script to control
 \ V / (_) | |  volume
  \_/ \___/|_|
__EOF
)"
# Author: Violet
# Last Change: 31 Oct 2024


ver='1.5';
script="$(basename "$0")";

debug(){ [ "$verb" -gt "$1" ] && >&2 printf "[debug%d] %s\n" "$1" "$2"; };
print(){ [ "$verb" -gt 0 ] && echo "$2"; };

/usr/bin/pactl set-sink-mute @DEFAULT_SINK@ toggle;
/usr/bin/pactl set-sink-volume @DEFAULT_SINK@ -5%;
/usr/bin/pactl set-sink-volume @DEFAULT_SINK@ +5%;

m='';
[ "$(/usr/bin/pactl get-sink-mute '@DEFAULT_SINK@' | cut -d' ' -f2)" = 'yes' ] && m='(muted)';
v="$(/usr/bin/pactl get-sink-volume '@DEFAULT_SINK@' | head -n1 | awk '{ print $5 " | " $12 }')";
notify-send -h 'string:synchronous:volume' "$v""$m";


usage(){
  if [ "${1:-1}" -eq 0 ];
  then
    echo "$banner"
  fi;
  cat <<__EOF
Usage: $script;  $script -h;  $script -V;
       $script [-mutqvnN] [vol[+-]];

Options:

  -m, -u, -t  =>  mute, unmute, toggle mute (resp) in order of precedence

  -q    =>  quiet
  -v    =>  increase verbosity (max: -vvv)
  -n    =>  use notify-send
            note: this happens automatically when called noninteractively
  -N    =>  do not notify (even if noninteractive)

  -h  => display this help and exit
  -V  => display the version and exit

Examples:
  - $script 10+    => increase volume by 10
  - $script -n 5-  => decrease volume by 5, round it, and notify-send volume
  - $script -u 40  => unmute and set volume to 40
__EOF

  if [ "${1:-1}" -eq 0 ];
  then
    printf "\nDepends: amixer, perl, sed, notify-send, figlet (opt)\n"
  fi;
  exit "${1:-1}";
}

notify(){
  local vol mutestr icon_name
  vol="$1"
  mutestr="$2"
  if [ -n "$mutestr" ] || [ "$vol" -eq 0 ];
  then
    icon_name="audio-volume-muted";
  elif [ "$vol" -lt 33 ];
  then
    icon_name="audio-volume-low";
  elif [ "$vol" -lt 67 ];
  then
    icon_name="audio-volume-medium";
  else
    icon_name="audio-volume-high";
  fi;
  notify-send "${mutestr:-vol} $vol" \
    -i "$icon_name" \
    -h "int:value:$vol" \
    -h 'string:synchronous:volume';
}

interactive=0;
shouldnotify=0;
if tty -s;
then
  interactive=1;
else
  if xset q >/dev/null 2>&1;
  then
    shouldnotify=1
  fi;
fi;

mute=0;
unmute=0;
togglemute=0;
verb=1;

while getopts rmutqvnNhVd o;
do
  case "$o" in
    m) mute=1                                ;;
    u) unmute=1                              ;;
    t) togglemute=1                          ;;
    q) verb=0                                ;;
    v) [ "$verb" -gt 0 ] && verb=$((verb+1)) ;;
    n) shouldnotify=1                        ;;
    N) shouldnotify=0                        ;;
    V) echo "vol "$ver"";
       exit 0                                ;;
    h) usage 0                               ;;
    [?]) usage                               ;;
  esac;
done;
shift $((OPTIND-1));

[ -n "$(echo "$*" | sed 's/^[0-9]\+[+-]//')" ] && usage;

volArg="$(echo "$*" | sed 's/^\([0-9]\+\)[+-]/\1/')";
incSym="$(echo "$*" | sed 's/^[0-9]\+\([+-]\)/\1/')";


if [ -z "$card" ]
then
  _card="";
else
  _card="-c $card";
fi;

adjusted=0;

# adjust volume
if [ -n "$incSym" ];
then
  # increment volume
  if [ $round -eq 1 ];
  then
    drift=$((2 - ( ( (vol + volArg) % 5 + 2) % 5) ));
    volArg=$((volArg + drift));
  fi;
  amixerVolCmd="$volArg%$incSym"
  debug 2 "incrementing volume by: $incSym$volArg";
elif [ -n "$volArg" ];
then
  # set volume
  if [ $round -eq 1 ];
  then
    drift=$((2 - ( ( (vol + volArg) % 5 + 2) % 5) ));
    volArg=$((volArg + drift));
  fi;
  amixerVolCmd="$volArg%"
  debug 2 "setting volume to: $amixerVolCmd";
elif [ $round -eq 1 ];
then
  drift=$((2 - ( (vol % 5 + 2) % 5) ));
  amixerVolCmd="$((vol + drift))%";
fi;
if [ -n "$amixerVolCmd" ];
then
  debug 3 "\$ amixer set $_card $mixer $amixerVolCmd";
  amixer set $_card "$mixer" "$amixerVolCmd" >/dev/null;
  adjusted=1;
fi;

# muting
if [ $mute -eq 1 ];
then
  amixerMuteCmd=mute;
  debug 2 "muting";
elif [ $unmute -eq 1 ];
then
  amixerMuteCmd=unmute;
  debug 2 "unmuting";
elif [ $togglemute -eq 1 ];
then
  amixerMuteCmd=toggle;
  debug 2 "toggleing mute";
fi;
if [ -n "$amixerMuteCmd" ];
then
  debug 3 "\$ amixer set $_card $mixer $amixerMuteCmd";
  amixer set $_card "$mixer" "$amixerMuteCmd" >/dev/null;
  adjusted=1;
fi;

if [ $adjusted -eq 1 ];
then
  getVol;
fi;

if [ $verb -gt 1 ] || [ $interactive = 1 ] && [ $verb -ne 0 ];
then
  echo "$vol%$mutestr";
fi

if [ $shouldnotify -eq 1 ];
then
  notify "$vol" "$mutestr"
fi;

# vim: ft=sh
